var commander = {
    
    create: function(number) {
        var ship = document.createElement('div');
        $('.wrapper').appendChild(ship);
        ship.classList.add(number);
        switch (number) {
            case 'one':
                orbit[0] = new Spaceship(number);
                break;
            case 'two':
                orbit[1] = new Spaceship(number);
                break;
            case 'three':
                orbit[2] = new Spaceship(number);
                break;
            case 'four':
                orbit[3] = new Spaceship(number);
                break;
            default:
                break;
        }
        var energy = document.createTextNode('100');
        ship.appendChild(energy);
    },
    
    send: function(event) {
        event = Util.getEvent(event);
        var target = Util.getTarget(event),
            shipNumber = target.parentNode.children[0].textContent,
            order = target.className,
            command = {
                id: shipNumber,
                order: order
            };
        if (order === 'create' && !$('.' + shipNumber)) {
            this.create(shipNumber);
            log(command, true);
            return;
        }
        mediator(command);
    }
};

function $(selector) {
    return document.querySelector(selector);
}

//可以接受任意个参数，作为圆的半径，画出参数个数的同心圆
function circle() {
    var canvas =$('#circle');
    if (canvas.getContext) {
        var ctx = canvas.getContext('2d');
    }
    for (var i = 0; i < arguments.length; i++) {
        var radius = arguments[i];
        ctx.beginPath();
        ctx.arc(320, 320, radius, 0, Math.PI * 2, true);
        ctx.closePath();
        if (i === 0) {
            ctx.fillStyle = '#58FE01';
            ctx.fill();
        } else {
            ctx.strokeStyle = '#58FE01';
            ctx.stroke();
        }
    }
}

circle(25, 80, 140, 200, 260);




//orbit上创建数组存储飞船
var orbit = [],
    loss = 0.3,
    consoleLog = $('.console-log');



//模拟传递介质Mediator
function mediator(command) {
    var random = Math.random();
    if (random < loss) {
        log(command, false);
        return;
    }
    setTimeout(function() {
        for (var i = 0; i < orbit.length; i++) {
            if (orbit[i]) {
                orbit[i].signalReceive(command);
            }
        }
    }, 1000);
    
}




//工具函数，用于在控制台上输出操作结果
function log(command, state) {
    var text = command.order + ' ship' + ' in orbit ' + command.id + '......';
    if (!state) {
        text = 'failed to ' + text;
    }
    var li = document.createElement('li'),
        logs = document.createTextNode(text);
    li.appendChild(logs);
    consoleLog.appendChild(li);
    consoleLog.scrollTop = consoleLog.scrollHeight - consoleLog.offsetHeight;
}




//工具函数，用于完成飞行动画
function start(that, r) {
    that.fly = true;
    var radius = r,
        x = 320 - that.div.offsetWidth / 2 + 1,
        y = 320 - that.div.offsetHeight / 2 + 1;
    that.timer = setInterval(function() {
        that.div.textContent = that.energy;
        if (that.energy > 0 && that.fly) {
            that.deg++;
            if (that.deg % 50 === 0) {
                that.energy < 5 ? that.energy = 0 : that.energy -= that.consume; 
            }
            var a = Math.sin(that.deg * Math.PI / 180) * radius;
            var b = Math.cos(that.deg * Math.PI / 180) * radius;
            that.div.style.left = x + a + 'px';
            that.div.style.top = y - b +'px';
            that.div.style.transform = 'rotate(' + that.deg + 'deg)';
        } else {
            clearInterval(that.timer);
            that.fly = false;
            that.energySystem();
        }
    }, 20);
}


//工具函数，用于暂停飞船的飞行状态
function stop(that) {
    that.fly = false;
    clearInterval(that.timer);
    that.energySystem();
}



//委托事件
var command = $('.commander');
Util.addHandler(command, 'click', commander.send.bind(commander));



//飞船类
var Spaceship = function(id) {
    this.speed = 20;//flying speed
    this.consume = 5; //consume speed of fuel
    this.charge = 2;// charge speed
    this.energy = 100;//percent of energy
    this.fly = false;// the state of spaceship, flying or not
    this.id = id;//only identifier of spaceship
    this.div = $('.' + id);//dom structure in html
    this.deg = 0;//the flying deg of spaceship
    this.timer;
};

Spaceship.prototype = {

    dynamSystem: function(command) {
        var radius;
        switch (command.id) {
            case 'one':
                radius = 80;
                break;
            case 'two':
                radius = 140;
                break;
            case 'three':
                radius = 200;
                break;
            case 'four':
                radius = 260;
                break;
            default:
                break;
        }
        if (!this.fly && command.order === 'start') {
            start(this, radius);
        } else if (this.fly && command.order === 'stop'){
            stop(this);
        }
    },

    energySystem: function() {
        var that = this;
        if (that.fly === true || that.energy >= 100) {
            return;
        }
        var timer = setInterval(function() {
            that.energy === 99 ? that.energy = 100 : that.energy += that.charge;
            if (that.energy === 100 || that.fly === true) {
                clearInterval(timer);
            }
            that.div.textContent = that.energy;
        }, 1000);
    },

    signalReceive: function(command) {
        if (this.id !== command.id) {
            return;
        }
        log(command, true);
        switch(command.order) {
            case 'start':
                this.dynamSystem(command);
                break;
            case 'stop':
                this.dynamSystem(command);
                break;
            case 'destroy':
                this.selfDestroy();
                break;
            default:
                break;
        }
    },

    selfDestroy: function() {
        this.div.parentNode.removeChild(this.div);
    }
};

var Util = {

    addHandler: function(element, type, handler){
        if (element.addEventListener){
            element.addEventListener(type, handler, false);
        } else if (element.attachEvent){
            element.attachEvent("on" + type, handler);
        } else {
            element["on" + type] = handler;
        }
    },
    
    getButton: function(event){
        if (document.implementation.hasFeature("MouseEvents", "2.0")){
            return event.button;
        } else {
            switch(event.button){
                case 0:
                case 1:
                case 3:
                case 5:
                case 7:
                    return 0;
                case 2:
                case 6:
                    return 2;
                case 4: return 1;
            }
        }
    },
    
    getCharCode: function(event){
        if (typeof event.charCode == "number"){
            return event.charCode;
        } else {
            return event.keyCode;
        }
    },
    
    getClipboardText: function(event){
        var clipboardData =  (event.clipboardData || window.clipboardData);
        return clipboardData.getData("text");
    },
    
    getEvent: function(event){
        return event ? event : window.event;
    },
    
    getRelatedTarget: function(event){
        if (event.relatedTarget){
            return event.relatedTarget;
        } else if (event.toElement){
            return event.toElement;
        } else if (event.fromElement){
            return event.fromElement;
        } else {
            return null;
        }
    
    },
    
    getTarget: function(event){
        return event.target || event.srcElement;
    },
    
    getWheelDelta: function(event){
        if (event.wheelDelta){
            return (client.engine.opera && client.engine.opera < 9.5 ? -event.wheelDelta : event.wheelDelta);
        } else {
            return -event.detail * 40;
        }
    },
    
    preventDefault: function(event){
        if (event.preventDefault){
            event.preventDefault();
        } else {
            event.returnValue = false;
        }
    },

    removeHandler: function(element, type, handler){
        if (element.removeEventListener){
            element.removeEventListener(type, handler, false);
        } else if (element.detachEvent){
            element.detachEvent("on" + type, handler);
        } else {
            element["on" + type] = null;
        }
    },
    
    setClipboardText: function(event, value){
        if (event.clipboardData){
            event.clipboardData.setData("text/plain", value);
        } else if (window.clipboardData){
            window.clipboardData.setData("text", value);
        }
    },
    
    stopPropagation: function(event){
        if (event.stopPropagation){
            event.stopPropagation();
        } else {
            event.cancelBubble = true;
        }
    }

};

